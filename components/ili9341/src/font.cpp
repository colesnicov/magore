
/**
 @file font.c

 @brief Font display for ili9341 driver
 Displays fonts generated by bdffont2c BDF to C code converter
 BDF = Glyph Bitmap Distribution Format
 The code handles fixed, proportional and bounding box format fonts
 @see http://en.wikipedia.org/wiki/Glyph_Bitmap_Distribution_Format

 @par Copyright &copy; 2015 Mike Gore, GPL License
 @par You are free to use this code under the terms of GPL
  Please retain a copy of this notice in any code you use it in.

  This is free software: you can redistribute it and/or modify it under the
  terms of the GNU General Public License as published by the Free Software
  Foundation, either version 3 of the License, or (at your option)
  any later version.
  
  This software is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


#include <esp8266/flash.h>
#include <ili9341/tft_printf.hpp>
#include <stdint.h>
#include <stdarg.h>
#include <string.h>
#include <math.h>


#include "user_config.h"

/// @brief save fonts in flash
#ifndef MEMSPACE
#define MEMSPACE_FONT MEMSPACE
#endif

#include <ili9341/ili9341.hpp>
#include <ili9341/font.hpp>

/// @brief Include the Generated Font table
/// The generated tables always include Font specifications:
/// width, height, offsets, font type, etc
/// Font information: name, copyright, style information
/// Note: FONSPECS and FONTINFO defines controls actual usage.
/// We can also overide FONTSPECS here or in the Makefile for testing.
#include <ili9341/fonts.h>

// All the fonts - defined in fonts.h
extern _font *allfonts[];

int font_max()
{
	int i;
	for(i=0;allfonts[i];++i)
		;
	return(i);
}

/// @brief  Get font height used for line to line spacing
/// @param[in] font font number
/// @return  Height in pixels
int font_H(int font)
{
// check font
    _font *z = allfonts[font];
	return(z->Height);
}

/// @brief  Get font Width used for character to character spacing
/// @param[in] font font number
/// @return  Width in pixels
int font_W(int font)
{
// check font
    _font *z = allfonts[font];
	return(z->Width);
}



/// @brief  Get font attributes for a font
/// @param[in] *win: Window Structure
/// @param[in] c: character
/// @param[in] *f: font structure
/// @return  font number
int font_attr(window *win, int c, _fontc *f)
{
    int offset;
    int num;
    unsigned char *ptr;

// check font
    _font *z = allfonts[win->font];
    _fontspecs s;

    num = c - z->First;
    if(num < 0 || num >= z->Glyphs)
        return(-1);

    f->ptr = z->bitmap;

// If we have font specifications defined and included we can use them.
// Notes: Normally for small fixed fonts we do not want to included them.
// However; if the font is large we can define just the active part of 
// the character to reduce the overall size.

    if(z->specs)
    {
        f->Width = z->Width;
        f->Height = z->Height;

// Copy the full font specification into ram for easy access
// This does not use much memory as it does not include the bitmap itself
// This method avoids memory alignment access errors on the ESP8266.

        cpy_flash((uint8_t *)&(z->specs[num]), (uint8_t *)&s,sizeof(_fontspecs));

		// Fonts Width,Height,X,Y
        f->w = s.Width;
        f->h = s.Height;
        f->x= s.X;
        f->y= s.Y;

		// Bitmap offset
        offset = s.Offset;
        f->ptr += offset;

	
		// The user may override the fixed variable font flag
        // This reduces the width of fixed fonts to just the active pixels.
        f->flags = win->flags;

		// Skip is the combined width, and an optional character spacing gap
		// Some characters have no active size (like the space character )
		// so we just use the master font width and gap
        if( !(f->flags & FONT_VAR) || !f->w )
            f->skip = z->Width + z->gap;
        else
			f->skip = f->x + f->w + z->gap;	// Include the X offset, Width and Gap
    }

    else   
    {
		// No Specifications, therefore the font must be fixed.
		// We create one using the master font size spec
		// There are no proportional options here.
        f->Width = z->Width;
        f->Height = z->Height;

        f->w = z->Width;
        f->h = z->Height;
        f->x = 0;
        f->y = 0;

		// FIXME - fixed fonts without specs have no proportional modes to use
        f->flags = win->flags;

		f->skip = z->Width + z->gap;

		// Each bitmap is a bit array w by h in size without any padding
		// except at the end of the array which is rounded to the next byte boundary.
        offset = ((z->Width * z->Height)+7)/8; /* round to byte boundary */
        f->ptr += (offset * num);

    }

	// FIXME
	// This zero size skip test should never be needed - for now we increase to 1..
	if(!f->skip)
		f->skip++;
// =====================================

#if ILI9341_DEBUG & 2
    printf("c: %02x font:%d w:%d h:%d x:%d y:%d skip:%d, W:%d, H:%d\r\n",
        0xff & c, 0xff & win->font, f->w, f->h, f->x, f->y, f->skip, f->Width, f->Height);
#endif
    return(win->font);
}


/// @brief Display a character and optionally wrap the graphic cursor
/// @see tft_putch  for main output function
/// Does not handle control characters
/// @param[in] *win: Window Structure of active window
/// @param[in] c: character
/// @return  void
/// TODO: To make proportional fonts render even better we should reduce
/// the font gap so that all of the active pixels between two fonts come no 
/// nearer then a defined value.
/// Example: consider the characters "Td", the 'd' can actually be part way INSIDE the T
///
void tft_drawChar(window *win, uint8_t c)
{
    _fontc f;
    int ret;
    int yskip;

    ret = font_attr(win, c, &f);
    if(ret < 0)
        return;

// process wrapping - will the character fit ?
	if((win->xpos + f.skip - 1)  >= win->w)
	{
		if(win->flags & WRAP_H)
		{
			win->ypos += f.Height;
			win->xpos = 0;
		}
		else
		{
			// TODO H scroll
			return;
		}
	}

	// Will the character fit ?
	if((win->ypos+f.Height-1) >= win->h)
	{
		if(win->flags & WRAP_V)
		{
			win->ypos = 0;
		}
		else
		{
			win->ypos -= f.Height;
			tft_Vscroll(win,f.Height);
		}
	}

// Conditionally clear the character area - not needed for full size fixed fonts..
// If the character is not full size then pre-clear the full font bit array
// (saves the more complex tests of clearing additional areas around the active font)
// Note: We use skip instead of Width because of the additional gap that must also
// be cleared..

// FIXME we should do this in two parts - font area and then the gap area.
// Since we always want to clear the gap - but not always the font - when fixed.

// Optionally clear the font area, then the gap
    if(f.h != f.Height ||  f.w != f.skip || f.x != 0 || f.y != 0)
        tft_fillRectWH(win, win->xpos, win->ypos, f.skip, f.Height, win->bg);

// This can happen for characters with no active pixels like the space character.
    if(!f.h || !f.w)
	{
		win->xpos += f.skip;
        return;
	}

// Top of bit bounding box ( first row with a 1 bit in it)
    yskip = f.Height - (f.y+f.h);

// Write the font to the screen
    tft_bit_blit(win, f.ptr, win->xpos+f.x, win->ypos+yskip, f.w, f.h);

	// skip is the offset to the next character
	win->xpos += f.skip;
}
